// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class NewDSponsorNFT extends ethereum.Event {
  get params(): NewDSponsorNFT__Params {
    return new NewDSponsorNFT__Params(this);
  }
}

export class NewDSponsorNFT__Params {
  _event: NewDSponsorNFT;

  constructor(event: NewDSponsorNFT) {
    this._event = event;
  }

  get contractAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get baseURI(): string {
    return this._event.parameters[4].value.toString();
  }

  get contractURI(): string {
    return this._event.parameters[5].value.toString();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get forwarder(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get royaltyBps(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get currencies(): Array<Address> {
    return this._event.parameters[9].value.toAddressArray();
  }

  get prices(): Array<BigInt> {
    return this._event.parameters[10].value.toBigIntArray();
  }

  get allowedTokenIds(): Array<BigInt> {
    return this._event.parameters[11].value.toBigIntArray();
  }
}

export class DSponsorNFTFactory__createDSponsorNFTInputParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get baseURI(): string {
    return this[2].toString();
  }

  get contractURI(): string {
    return this[3].toString();
  }

  get maxSupply(): BigInt {
    return this[4].toBigInt();
  }

  get forwarder(): Address {
    return this[5].toAddress();
  }

  get initialOwner(): Address {
    return this[6].toAddress();
  }

  get royaltyBps(): BigInt {
    return this[7].toBigInt();
  }

  get currencies(): Array<Address> {
    return this[8].toAddressArray();
  }

  get prices(): Array<BigInt> {
    return this[9].toBigIntArray();
  }

  get allowedTokenIds(): Array<BigInt> {
    return this[10].toBigIntArray();
  }
}

export class DSponsorNFTFactory extends ethereum.SmartContract {
  static bind(address: Address): DSponsorNFTFactory {
    return new DSponsorNFTFactory("DSponsorNFTFactory", address);
  }

  createDSponsorNFT(
    params: DSponsorNFTFactory__createDSponsorNFTInputParamsStruct,
  ): Address {
    let result = super.call(
      "createDSponsorNFT",
      "createDSponsorNFT((string,string,string,string,uint256,address,address,uint96,address[],uint256[],uint256[])):(address)",
      [ethereum.Value.fromTuple(params)],
    );

    return result[0].toAddress();
  }

  try_createDSponsorNFT(
    params: DSponsorNFTFactory__createDSponsorNFTInputParamsStruct,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createDSponsorNFT",
      "createDSponsorNFT((string,string,string,string,uint256,address,address,uint96,address[],uint256[],uint256[])):(address)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftImplementation(): Address {
    let result = super.call(
      "nftImplementation",
      "nftImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_nftImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftImplementation",
      "nftImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nftImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateDSponsorNFTCall extends ethereum.Call {
  get inputs(): CreateDSponsorNFTCall__Inputs {
    return new CreateDSponsorNFTCall__Inputs(this);
  }

  get outputs(): CreateDSponsorNFTCall__Outputs {
    return new CreateDSponsorNFTCall__Outputs(this);
  }
}

export class CreateDSponsorNFTCall__Inputs {
  _call: CreateDSponsorNFTCall;

  constructor(call: CreateDSponsorNFTCall) {
    this._call = call;
  }

  get params(): CreateDSponsorNFTCallParamsStruct {
    return changetype<CreateDSponsorNFTCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CreateDSponsorNFTCall__Outputs {
  _call: CreateDSponsorNFTCall;

  constructor(call: CreateDSponsorNFTCall) {
    this._call = call;
  }

  get instance(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateDSponsorNFTCallParamsStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get baseURI(): string {
    return this[2].toString();
  }

  get contractURI(): string {
    return this[3].toString();
  }

  get maxSupply(): BigInt {
    return this[4].toBigInt();
  }

  get forwarder(): Address {
    return this[5].toAddress();
  }

  get initialOwner(): Address {
    return this[6].toAddress();
  }

  get royaltyBps(): BigInt {
    return this[7].toBigInt();
  }

  get currencies(): Array<Address> {
    return this[8].toAddressArray();
  }

  get prices(): Array<BigInt> {
    return this[9].toBigIntArray();
  }

  get allowedTokenIds(): Array<BigInt> {
    return this[10].toBigIntArray();
  }
}
